{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1iG4feTck5bh52eYcGPRnOf723ShfWVl9","timestamp":1669832133379}],"authorship_tag":"ABX9TyOJ99Px+Zr3axMDkCa0fatz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import networkx as nx\n","import PMFG"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":401},"id":"8d103396wXW0","executionInfo":{"status":"error","timestamp":1669832230335,"user_tz":-330,"elapsed":10,"user":{"displayName":"Sharath Chandra","userId":"02238059319400209897"}},"outputId":"c4760ce3-fea3-42a7-ced2-68331b9e5d00"},"execution_count":1,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-41b8988bb3f5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnetworkx\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mPMFG\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'PMFG'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["!pip install planarity"],"metadata":{"id":"8jyjxLuWxLzY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","import networkx as nx\n","import numpy as np\n","import planarity\n","import progressbar\n","\n","\n","def get_network_PMFG(corr_matrix): \n","\n","    #get the list of decreasing weighted links\n","    rholist = []\n","    n = len(corr_matrix)\n","    for i in range(n): \n","        for j in range(n): \n","            if i<j:\n","                if corr_matrix[i][j] != 0:\n","                    rholist.append([abs(float(corr_matrix[i][j])),i,j])\n","                \n","    rholist.sort(key=lambda x: x[0])\n","    rholist.reverse()\n","    \n","    m = len(rholist)\n","    filtered_matr = np.zeros((n, n))\n","    control = 0\n","\n","\n","    with progressbar.ProgressBar(max_value=m) as bar:\n","    #get the filtered adjacency matrix using PMFG algorithm\n","        for t in range(m): \n","            if control <= 3 * (n - 2) - 1: \n","                i = rholist[t][1]\n","                j = rholist[t][2]\n","                filtered_matr[i][j] = rholist[t][0]\n","\n","                #check planarity here\n","                G = nx.Graph()\n","                for i in range(0,n): \n","                    for j in range(0,n): \n","                        if filtered_matr[i][j] != 0:\n","                            G.add_edge(int(i),int(j),weight = filtered_matr[i][j])\n","                if planarity.is_planar(G) == False: \n","                    filtered_matr[i][j] = 0\n","                    control = control +1\n","            bar.update(t)\n","    \n","    #build the network\n","    PMFG = nx.Graph()\n","    for i in range(0,n): \n","        for j in range(0,n): \n","            if filtered_matr[i][j] != 0:\n","                PMFG.add_edge(int(i),int(j),weight = filtered_matr[i][j])\n","    \n","    return PMFG"],"metadata":{"id":"vwVeFT2pxKC5","executionInfo":{"status":"ok","timestamp":1669832452508,"user_tz":-330,"elapsed":689,"user":{"displayName":"Sharath Chandra","userId":"02238059319400209897"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["file = '/content/drive/MyDrive/DSFM/data/corr_matrix/corr_matrix_pearson.csv'\n","\n","#load correlation matrix\n","corr_matrix = []\n","fh = open(file,'r')\n","for line in fh: \n","    s = line.strip().split(',')\n","    corr_matrix.append(s)\n","fh.close() \n","\n","#get the network \n","G = get_network_PMFG(corr_matrix)\n","\n","#save edges list\n","nx.write_weighted_edgelist(G, '/content/edgeslistP.txt')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eV8o8fCVxVGo","executionInfo":{"status":"ok","timestamp":1669832903554,"user_tz":-330,"elapsed":176333,"user":{"displayName":"Sharath Chandra","userId":"02238059319400209897"}},"outputId":"7046cc1c-9550-4ae7-acfb-4b7de95eb048"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["100% (113050 of 113050) |################| Elapsed Time: 0:02:55 Time:  0:02:55\n"]}]},{"cell_type":"code","source":["file = '/content/drive/MyDrive/DSFM/data/corr_matrix/corr_matrix_kendall.csv'\n","\n","#load correlation matrix\n","corr_matrix = []\n","fh = open(file,'r')\n","for line in fh: \n","    s = line.strip().split(',')\n","    corr_matrix.append(s)\n","fh.close() \n","\n","#get the network \n","G = get_network_PMFG(corr_matrix)\n","\n","#save edges list\n","nx.write_weighted_edgelist(G, '/content/edgeslistK.txt')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dba0mKjxxaGj","executionInfo":{"status":"ok","timestamp":1669833073207,"user_tz":-330,"elapsed":169658,"user":{"displayName":"Sharath Chandra","userId":"02238059319400209897"}},"outputId":"212ae1b2-78cb-497a-8651-580f3d381ae5"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["100% (113050 of 113050) |################| Elapsed Time: 0:02:49 Time:  0:02:49\n"]}]},{"cell_type":"code","source":["file = '/content/drive/MyDrive/DSFM/data/corr_matrix/corr_matrix_spearman.csv'\n","\n","#load correlation matrix\n","corr_matrix = []\n","fh = open(file,'r')\n","for line in fh: \n","    s = line.strip().split(',')\n","    corr_matrix.append(s)\n","fh.close() \n","\n","#get the network \n","G = get_network_PMFG(corr_matrix)\n","\n","#save edges list\n","nx.write_weighted_edgelist(G, '/content/edgeslistS.txt')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zd4PUVPmylJi","executionInfo":{"status":"ok","timestamp":1669833291142,"user_tz":-330,"elapsed":171620,"user":{"displayName":"Sharath Chandra","userId":"02238059319400209897"}},"outputId":"7ef6dadd-200b-46e2-fd1e-4095a302b95f"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["100% (113050 of 113050) |################| Elapsed Time: 0:02:50 Time:  0:02:50\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"JTFjaFANyxgm"},"execution_count":null,"outputs":[]}]}